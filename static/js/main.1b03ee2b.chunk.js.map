{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","list","things","owner","state","handleChange","bind","handleSubmit","handleChangeSort","event","this","setState","target","value","preventDefault","push","document","getElementById","style","display","sort","a","b","console","log","className","onClick","map","values","index","key","formDisplay","onSubmit","id","type","name","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RA8GeA,G,wDA/FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAXVC,KAAO,CACH,CACIC,OAAQ,QACRC,MAAO,aAEX,CACID,OAAQ,QACRC,MAAO,QAKX,EAAKC,MAAS,CACVF,OAAQ,GACRC,MAAO,IAEX,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBART,E,yDAWNG,GACTC,KAAKC,SAAS,CACVT,OAAQO,EAAMG,OAAOC,MACrBV,MAAOM,EAAMG,OAAOC,U,mCAIfJ,GACTA,EAAMK,iBACNJ,KAAKT,KAAKc,KAAKL,KAAKN,OACpBY,SAASC,eAAe,cAAcC,MAAMC,QAAU,OACtDH,SAASC,eAAe,UAAUJ,MAAQ,GAC1CG,SAASC,eAAe,SAASJ,MAAQ,K,oCAKzCG,SAASC,eAAe,cAAcC,MAAMC,QAAU,U,uCAGzCV,GACb,IAAIW,EAAOV,KAAKT,KAAKmB,MAAK,SAACC,EAAGC,GAC1B,MAAa,WAAVb,GACCc,QAAQC,IAAIH,EAAEnB,QACPmB,EAAEnB,OAASoB,EAAEpB,QAEbmB,EAAElB,MAAQmB,EAAEnB,SAG3BO,KAAKC,SAAS,CACVV,KAAMmB,M,4EAQJ,IAAD,OACL,OACI,yBAAKK,UAAU,UACX,6BACI,+BACI,+BACI,4BACI,qCACA,4BACI,4BAAQC,QAAS,kBAAM,EAAKlB,iBAAiB,YAA7C,WAEJ,4BACI,4BAAQkB,QAAS,kBAAM,EAAKlB,iBAAiB,WAA7C,YAIZ,+BACKE,KAAKT,KAAK0B,KAAI,SAACC,EAAQC,GACpB,OACI,wBAAIC,IAAKD,GACL,4BAAKA,GACL,4BAAKD,EAAO1B,QACZ,4BAAK0B,EAAOzB,aAMhC,4BAAQuB,QAAShB,KAAKqB,aAAtB,aACA,0BAAMC,SAAUtB,KAAKH,aAAc0B,GAAG,cAClC,yCAEZ,2BAAOC,KAAK,OAAOC,KAAMzB,KAAKN,MAAMF,OAAQ+B,GAAG,SAASG,SAAU1B,KAAKL,gBAE3D,wCAEZ,2BAAO6B,KAAK,OAAOC,KAAMzB,KAAKN,MAAMD,MAAO8B,GAAG,QAAQG,SAAU1B,KAAKL,gBAEzD,2BAAO6B,KAAK,SAASrB,MAAM,kB,GAnGhCwB,cCYJC,G,6KARX,OACE,yBAAKb,UAAU,OACX,kBAAC,EAAD,W,GALQY,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAASC,eAAe,SDyHpB,kBAAmB8B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.1b03ee2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css'\r\n\r\nclass Form extends Component {\r\n\r\n    list = [\r\n        {\r\n            things: 'item1',\r\n            owner: 'venkatesh',\r\n        },\r\n        {\r\n            things: 'item2',\r\n            owner: 'sai',\r\n        }\r\n    ]\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            things: '',\r\n            owner: '',\r\n        });\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChangeSort = this.handleChangeSort.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            things: event.target.value,\r\n            owner: event.target.value,\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.list.push(this.state)\r\n        document.getElementById(\"formSubmit\").style.display = 'none'\r\n        document.getElementById(\"things\").value = \"\"\r\n        document.getElementById(\"owner\").value = \"\"\r\n    }\r\n\r\n\r\n    formDisplay() {\r\n        document.getElementById(\"formSubmit\").style.display = 'block'\r\n    }\r\n\r\n    handleChangeSort(event) {\r\n        let sort = this.list.sort((a, b) => {\r\n            if(event === 'things') {\r\n                console.log(a.things)\r\n                return a.things > b.things\r\n            } else {\r\n                return a.owner > b.owner\r\n            }\r\n        })\r\n        this.setState({\r\n            list: sort\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"margin\">\r\n                <div>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>index</th>\r\n                                <th>\r\n                                    <button onClick={() => this.handleChangeSort('things')}>Things</button>\r\n                                </th>\r\n                                <th>\r\n                                    <button onClick={() => this.handleChangeSort('owner')}>Owner</button>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.list.map((values, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{index}</td>\r\n                                        <td>{values.things}</td>\r\n                                        <td>{values.owner}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                    <button onClick={this.formDisplay}>Add items</button>\r\n                    <form onSubmit={this.handleSubmit} id=\"formSubmit\">\r\n                        <label>\r\n                            Things:\r\n            <input type=\"text\" name={this.state.things} id=\"things\" onChange={this.handleChange} />\r\n                        </label>\r\n                        <label>\r\n                            owner:\r\n            <input type=\"text\" name={this.state.owner} id=\"owner\" onChange={this.handleChange} />\r\n                        </label>\r\n                        <input type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport Form from './Form';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"app\">\n          <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}